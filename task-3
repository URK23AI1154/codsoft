import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

import statsmodels.api as sm
import warnings
warnings.filterwarnings('ignore')



def load_data():
    df = pd.read_csv("advertising.csv")
    print("Data Loaded. Shape:", df.shape)
    print(df.info())
    return df



def data_quality_checks(df):
    print("\nMissing Values (%):\n", df.isnull().sum() * 100 / len(df))

    print("\nGenerating Outlier Boxplots:")
    features = ['TV', 'Radio', 'Newspaper', 'Sales']
    for col in features:
        plt.figure(figsize=(4, 1.5))
        sns.boxplot(df[col], color='lightblue')
        plt.title(f'Outlier Analysis: {col}')
        plt.tight_layout()
        plt.show()



def explore_data(df):
    sns.pairplot(df, x_vars=['TV', 'Radio', 'Newspaper'], y_vars='Sales', height=4, kind='scatter')
    plt.suptitle("Feature vs Sales", y=1.02)
    plt.show()

    plt.figure(figsize=(6, 4))
    sns.heatmap(df.corr(), annot=True, cmap="coolwarm")
    plt.title("Correlation Heatmap")
    plt.show()



def statsmodels_ols(X_train, y_train):
    X_train_sm = sm.add_constant(X_train)
    model = sm.OLS(y_train, X_train_sm).fit()
    print("\nStatsmodels OLS Summary:\n", model.summary())

    return model, X_train_sm


def plot_residuals(y_true, y_pred):
    residuals = y_true - y_pred
    plt.figure()
    sns.histplot(residuals, bins=20, kde=True, color='coral')
    plt.title("Residual Distribution")
    plt.xlabel("Residuals")
    plt.show()

    plt.scatter(y_pred, residuals, alpha=0.6)
    plt.axhline(y=0, color='r', linestyle='--')
    plt.title("Residuals vs Predicted")
    plt.xlabel("Predicted")
    plt.ylabel("Residuals")
    plt.show()



def main():
    df = load_data()
    data_quality_checks(df)
    explore_data(df)

    
    X = df[['TV', 'Radio', 'Newspaper']]
    y = df['Sales']

    
    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=42)

    
    linreg = LinearRegression()
    linreg.fit(X_train, y_train)

    print("\nModel Coefficients:")
    print("Intercept:", linreg.intercept_)
    print("Coefficients:", dict(zip(X.columns, linreg.coef_)))

    
    sm_model, X_train_sm = statsmodels_ols(X_train, y_train)

    
    y_pred = linreg.predict(X_test)

    
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    r2 = r2_score(y_test, y_pred)
    print("\nEvaluation on Test Set:")
    print("RMSE:", round(rmse, 2))
    print("RÂ² Score:", round(r2, 4))

    
    plt.figure(figsize=(5, 4))
    plt.scatter(y_test, y_pred, alpha=0.7)
    plt.xlabel("Actual Sales")
    plt.ylabel("Predicted Sales")
    plt.title("Actual vs Predicted Sales")
    plt.plot([0, 30], [0, 30], '--r')
    plt.tight_layout()
    plt.show()

    
    plot_residuals(y_test, y_pred)


if __name__ == '__main__':
    main()
